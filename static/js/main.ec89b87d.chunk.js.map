{"version":3,"sources":["bootstrap.js","components/Panorama.jsx","components/Numbers.jsx","components/ResultModal.jsx","components/GenerateButton.jsx","components/BottomAppBar.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["install","useStyles","makeStyles","root","position","width","height","isLocalhost","Boolean","window","location","hostname","match","Panorama","classes","useEffect","paranomaStyle","document","getElementById","style","backgroundColor","naver","maps","panoId","zoomControl","size","innerWidth","innerHeight","react_default","a","createElement","className","id","margin","fontSize","_ref2","_ref","number","getNumberBackgroundColor","Numbers","_ref3","core_index_es","ResultModal","open","lottoNumbers","handleClose","aria-labelledby","onClose","container","justify","alignItems","map","numbers","key","components_Numbers","variant","color","fullWidth","onClick","left","right","top","GenerateButton","_useState","useState","_useState2","Object","slicedToArray","setLottoNumbers","_useState3","_useState4","setOpen","Fragment","Fab_default","concat","aria-label","generatedLottoNumbers","toConsumableArray","Array","sampleSize","range","sort","b","Fingerprint_default","components_ResultModal","positionFixed","bottom","BottomAppBar","AppBar_default","components_GenerateButton","BottomNavigation_default","showLabels","BottomNavigationAction_default","label","icon","Search_default","disabled","ListAlt_default","App","components_Panorama","components_BottomAppBar","theme","createMuiTheme","typography","useNextVariants","ReactDOM","render","index_es","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec89b87d.chunk.js","sourcesContent":["import 'normalize.css';\nimport 'animate.css';\nimport { install } from '@material-ui/styles';\n\ninstall();\n","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    position: 'fixed',\n    width: '100%',\n    height: '100%',\n  },\n});\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nconst Panorama = () => {\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (isLocalhost) {\n      const paranomaStyle = document.getElementById('panorama').style;\n      paranomaStyle.backgroundColor = 'grey';\n      paranomaStyle.width = '100%';\n      paranomaStyle.height = '100%';\n      paranomaStyle.position = 'fixed';\n    } else {\n      /* eslint-disable */\n      const panorama = new window.naver.maps.Panorama('panorama', {\n        panoId: 'C9p1IfEWYtci7irXSJRJSg==', // 한라산\n        zoomControl: true,\n        size: {\n          width: window.innerWidth,\n          height: window.innerHeight,\n        },\n      });\n      /* eslint-enable */\n    }\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <div id=\"panorama\" />\n    </div>\n  );\n};\n\nexport default Panorama;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\n\nconst getNumberBackgroundColor = ({ number }) => {\n  if (number <= 10) {\n    return '#fbc400';\n  }\n\n  if (number <= 20) {\n    return '#69c8f2';\n  }\n\n  if (number <= 30) {\n    return '#ff7272';\n  }\n\n  if (number <= 40) {\n    return '#aaa';\n  }\n\n  return '#b0d840';\n};\n\nconst useStyles = makeStyles({\n  root: {\n    margin: '2px',\n    width: '30px',\n    height: '30px',\n    fontSize: '1rem',\n    backgroundColor: ({ number }) => getNumberBackgroundColor({ number }),\n  },\n});\n\nconst Numbers = ({ number }) => {\n  const classes = useStyles({ number });\n  return <Avatar className={classes.root}>{number}</Avatar>;\n};\n\nNumbers.propTypes = {\n  number: PropTypes.number.isRequired,\n};\n\nexport default Numbers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Dialog, DialogTitle, Grid, Button, DialogContent, DialogActions,\n} from '@material-ui/core';\nimport Numbers from './Numbers';\n\nconst ResultModal = ({ open, lottoNumbers, handleClose }) => (\n  <Dialog aria-labelledby=\"result-modal-title\" open={open} onClose={handleClose}>\n    <DialogTitle id=\"result-modal-title\">\n      <Grid container justify=\"center\" alignItems=\"center\">\n        풍수지리 패턴 분석결과\n      </Grid>\n    </DialogTitle>\n\n    <DialogContent>\n      {lottoNumbers.map(numbers => (\n        <Grid key={numbers} container justify=\"center\" alignItems=\"center\">\n          {numbers.map(number => (\n            <Numbers key={number} number={number} />\n          ))}\n        </Grid>\n      ))}\n    </DialogContent>\n\n    <DialogActions>\n      <Button variant=\"contained\" color=\"primary\" fullWidth onClick={handleClose}>\n        닫기\n      </Button>\n    </DialogActions>\n  </Dialog>\n);\n\nResultModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  lottoNumbers: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n  handleClose: PropTypes.func.isRequired,\n};\n\nexport default ResultModal;\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Fab from '@material-ui/core/Fab';\nimport Fingerprint from '@material-ui/icons/Fingerprint';\nimport { sampleSize, range } from 'lodash';\nimport ResultModal from './ResultModal';\n\nconst generateLottoNumbers = () => sampleSize(range(1, 46), 6).sort((a, b) => a - b);\n\nconst useStyles = makeStyles({\n  root: {\n    position: 'absolute',\n    margin: 'auto',\n    left: 0,\n    right: 0,\n    top: -29,\n  },\n});\n\nconst GenerateButton = () => {\n  const classes = useStyles();\n  const [lottoNumbers, setLottoNumbers] = useState([]);\n  const [open, setOpen] = useState(false);\n\n  const handleClick = () => {\n    const generatedLottoNumbers = [...Array(5)].map(() => generateLottoNumbers());\n    setLottoNumbers(generatedLottoNumbers);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Fab\n        color=\"primary\"\n        className={`${classes.root}`}\n        aria-label=\"Generate\"\n        onClick={handleClick}\n      >\n        <Fingerprint className=\"animated infinite pulse\" fontSize=\"large\" />\n      </Fab>\n      <ResultModal open={open} lottoNumbers={lottoNumbers} handleClose={handleClose} />\n    </>\n  );\n};\n\nexport default GenerateButton;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport { makeStyles } from '@material-ui/styles';\nimport GenerateButton from './GenerateButton';\n\nconst useStyles = makeStyles({\n  positionFixed: { top: 'auto', bottom: 0 },\n});\n\nconst BottomAppBar = () => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"fixed\" className={classes.positionFixed}>\n      <GenerateButton />\n      <BottomNavigation showLabels>\n        <BottomNavigationAction label=\"장소검색\" icon={<SearchIcon />} />\n        <BottomNavigationAction disabled />\n        <BottomNavigationAction label=\"이전내역\" icon={<ListAltIcon />} />\n      </BottomNavigation>\n    </AppBar>\n  );\n};\n\nexport default BottomAppBar;\n","import React from 'react';\n\nimport Panorama from './components/Panorama';\nimport BottomAppBar from './components/BottomAppBar';\n\nconst App = () => (\n  <>\n    <Panorama />\n    <BottomAppBar />\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst theme = createMuiTheme({\n  typography: {\n    useNextVariants: true,\n  },\n});\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}